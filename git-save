#!/bin/bash
set -e && if [[ $1 = --debug ]]; then shift && set -x; fi

function abort { printf '%s\n' "$*" && echo 1; }

USAGE='git save [-u|-A] [-c COMMAND]
git save --redo-last | --redo-since=BASE
git save --make-root | --show-root | --redo-all

 
Commit changes with a standard message, given by git-summary(1).
With `-u` or `-A`, first update the index using git-add(1).
 
If invoked with `-c COMMAND`, run COMMAND in a shell and commit
the resulting changes, using "$ COMMAND" as the commit message.
 
If neither `-u`, `-A` nor `-c` were given, and the index is
already clean, then invoke `git add -u` first.

The `--redo-last` option recreates the last commit from scratch,
whereas `--redo-since` is used to start an interactive rebase in
which every commit is re-done.  The `--redo-all` option searches
for a specific kind of base commit created by `--make-root`.
 
git-save(1) prefixes all its commit messages with `~`.
--
u                Run `git add -u` first
A                Run `git add -A` first
 
c,command=       Commit the results of `sh -c CMD`
 
redo-last        Redo the last commit from scratch
redo-since=      Redo all commits since BASE

redo-all         Redo all commits since the last root commit
make-root        Create a root commit (an empty commit marked `~`)
show-root        Show the last root commit
 
debug            Run in debug mode
'
eval "$(git rev-parse --parseopt -- "$@" <<< "$USAGE" || exit $?)"

function --head-attached { git rev-parse HEAD >/dev/null 2>&1; }
function --index-clean { git diff-index --cached --quiet HEAD; }
function --index-dirty { ! --index-clean; }
function --make-root { git commit --allow-empty -m\~; }

if [[ $1 == -- ]] && ! --head-attached ; then
  echo 'git-save: inserting empty root commit' && --make-root
fi

add_options=()
while test $# != 0; do
  case $1 in
    -u|-A) add_options+=($1) && shift ;;
    -c) command=$2 && shift && shift ;;
    --redo-last) redo_last=true && shift ;;
    --redo-since) redo_since=$2 && shift && shift ;;
    --make-root) --make-root && shift ;;
    --redo-all) redo_all=true && shift ;;
    --show-root) show_root=true && shift ;;
    --) shift ;;
    *) abort "Unknown option: $1" ;;
  esac
done

if [[ $redo_last ]]; then
  message=`git log --format=%s -n1`
  if [[ $message =~ ^~\$\ (.*) ]]; then
    command=${BASH_REMATCH[1]}
    echo "git-save:~\$ $command"
    git reset --hard HEAD^
    git save -A -c "$command"
  elif [[ $message = '~' ]]; then
    echo "git-save: skip root commit"
  elif [[ $message =~ ^~(.*) ]]; then
    if git rev-parse HEAD^ >/dev/null 2>&1
    then parent=HEAD^
    else parent=`git hash-object -t tree /dev/null`; fi
    summary=`git-summary $parent HEAD`      
    if [[ $message = "~$summary" ]]; then
      echo "git-save: patch summary up-to-date"
    else
      echo "git-save: updating patch summary"
      git commit --amend -m "~$summary"
    fi
  else
    echo "git-save: skip"
  fi
elif [[ $redo_since ]]; then
  git rebase -i -x 'git save --redo-last' $redo_since --onto $redo_since
elif [[ $redo_all ]]; then
  root=`git save --show-root`
  git save --redo-since=$root
elif [[ $show_root ]]; then
  git log --grep='^~$' --format=%h ||
  abort 'Could not find root commit (message should be `~`)'
elif [[ $command ]]; then
  if test -z "`git status --short`"; then
    (cd "`git rev-parse --show-toplevel`" && sh -c "$command") || exit 1
    git add ${add_options[*]--u}
    git commit --allow-empty -m "~\$ $command"
  else
    abort 'You have uncommited changes'
  fi
else
  if [[ $add_options ]]; then
    git add ${add_options[*]}
  elif --index-clean; then
    git add -u && --index-dirty || git add -A
  fi
  git commit -m "~`git summary --cached`"
fi
